{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hi, welcome to my space!","title":"Home"},{"location":"FullStackOpen/","text":"FullStackOpen Learning Notes This is the place where I keep track of my learning notes and everything related to my journal of the FullStackOpen project. Tracker for the Full Stack Open Course (https://fullstackopen.com/en/) [ ] Part 0: Fundamentals of Web apps [00:51:48] a. General info [00:51:46] b. Fundamentals of Web apps [00:00:02] [ ] Part 1: Introduction to React [00:00:00] a. Introduction to React [00:00:00] b. JavaScript [00:00:00] c. Component state, event handlers [00:00:00] d. A more complex state, debugging React apps [00:00:00] [ ] Part 2: Communicating with server [00:00:00] a. Rendering a collection, modules [00:00:00] b. Forms [00:00:00] c. Getting data from server [00:00:00] d. Altering data in server [00:00:00] e. Adding styles to React app [00:00:00] [ ] Part 3: Programming a server with NodeJS and Express [00:00:00] a. Node.js and Express [00:00:00] b. Deploying app to internet [00:00:00] c. Saving data to MongoDB [00:00:00] d. Validation and ESLint [00:00:00] [ ] Part 4: Testing Express servers, user adminstration [00:00:00] a. Structure of backend application, introduction to testing [00:00:00] b. Testing the backend [00:00:00] c. User administration [00:00:00] d. Token authentication [00:00:00] [ ] Part 5: Testing React apps [00:00:00] a. Login in frontend [00:00:00] b. props.children and proptypes [00:00:00] c. Testing React apps [00:00:00] d. End to end testing: Playwright [00:00:00] e. End to end testing: Cypress [00:00:00] [ ] Part 6: Advanced state management [00:00:00] a. Flux-architecture and Redux [00:00:00] b. Many reducers [00:00:00] c. Communicating with server in a Redux application [00:00:00] d. React Query, useReducer and the context [00:00:00] [ ] Part 7: React router, custom hooks, styling app with CSS and webpack [00:00:00] a. React Router [00:00:00] b. Custom hooks [00:00:00] c. More about styles [00:00:00] d. Webpack [00:00:00] e. Class components, Miscellaneous [00:00:00] f. Exercises: extending the bloglist [00:00:00] [ ] Part 8: GraphQL [00:00:00] a. GraphQL-server [00:00:00] b. React and GraphQL [00:00:00] c. Database and user administration [00:00:00] d. Login and updating the cache [00:00:00] e. Fragments and subscriptions [00:00:00] [ ] Part 9: TypeScript [00:00:00] a. Background and introduction [00:00:00] b. First steps with TypeScript [00:00:00] c. Typing an Express app [00:00:00] d. React with types [00:00:00] e. Grande finale: Patientor [00:00:00] [ ] Part 10: React Native [00:00:00] a. Introduction to React Native [00:00:00] b. React Native basics [00:00:00] c. Communicating with server [00:00:00] d. Testing and extending our application [00:00:00] [ ] Part 11: CI/CD [00:00:00] a. Introduction to CI/CD [00:00:00] b. Getting started with Github Actions [00:00:00] c. Deployment [00:00:00] d. Keeping green [00:00:00] e. Expanding Further [00:00:00] [ ] Part 12: Containers [00:00:00] a. Introduction to Containers [00:00:00] b. Building and configuring environments [00:00:00] c. Basics of Orchestration [00:00:00] [ ] Part 13: Using relational databases [00:00:00] a. Using relational databases with Sequelize [00:00:00] b. Join tables and queries [00:00:00] c. Migrations, many-to-many relationships [00:00:00]","title":"FullStackOpen"},{"location":"FullStackOpen/#fullstackopen-learning-notes","text":"This is the place where I keep track of my learning notes and everything related to my journal of the FullStackOpen project. Tracker for the Full Stack Open Course (https://fullstackopen.com/en/) [ ] Part 0: Fundamentals of Web apps [00:51:48] a. General info [00:51:46] b. Fundamentals of Web apps [00:00:02] [ ] Part 1: Introduction to React [00:00:00] a. Introduction to React [00:00:00] b. JavaScript [00:00:00] c. Component state, event handlers [00:00:00] d. A more complex state, debugging React apps [00:00:00] [ ] Part 2: Communicating with server [00:00:00] a. Rendering a collection, modules [00:00:00] b. Forms [00:00:00] c. Getting data from server [00:00:00] d. Altering data in server [00:00:00] e. Adding styles to React app [00:00:00] [ ] Part 3: Programming a server with NodeJS and Express [00:00:00] a. Node.js and Express [00:00:00] b. Deploying app to internet [00:00:00] c. Saving data to MongoDB [00:00:00] d. Validation and ESLint [00:00:00] [ ] Part 4: Testing Express servers, user adminstration [00:00:00] a. Structure of backend application, introduction to testing [00:00:00] b. Testing the backend [00:00:00] c. User administration [00:00:00] d. Token authentication [00:00:00] [ ] Part 5: Testing React apps [00:00:00] a. Login in frontend [00:00:00] b. props.children and proptypes [00:00:00] c. Testing React apps [00:00:00] d. End to end testing: Playwright [00:00:00] e. End to end testing: Cypress [00:00:00] [ ] Part 6: Advanced state management [00:00:00] a. Flux-architecture and Redux [00:00:00] b. Many reducers [00:00:00] c. Communicating with server in a Redux application [00:00:00] d. React Query, useReducer and the context [00:00:00] [ ] Part 7: React router, custom hooks, styling app with CSS and webpack [00:00:00] a. React Router [00:00:00] b. Custom hooks [00:00:00] c. More about styles [00:00:00] d. Webpack [00:00:00] e. Class components, Miscellaneous [00:00:00] f. Exercises: extending the bloglist [00:00:00] [ ] Part 8: GraphQL [00:00:00] a. GraphQL-server [00:00:00] b. React and GraphQL [00:00:00] c. Database and user administration [00:00:00] d. Login and updating the cache [00:00:00] e. Fragments and subscriptions [00:00:00] [ ] Part 9: TypeScript [00:00:00] a. Background and introduction [00:00:00] b. First steps with TypeScript [00:00:00] c. Typing an Express app [00:00:00] d. React with types [00:00:00] e. Grande finale: Patientor [00:00:00] [ ] Part 10: React Native [00:00:00] a. Introduction to React Native [00:00:00] b. React Native basics [00:00:00] c. Communicating with server [00:00:00] d. Testing and extending our application [00:00:00] [ ] Part 11: CI/CD [00:00:00] a. Introduction to CI/CD [00:00:00] b. Getting started with Github Actions [00:00:00] c. Deployment [00:00:00] d. Keeping green [00:00:00] e. Expanding Further [00:00:00] [ ] Part 12: Containers [00:00:00] a. Introduction to Containers [00:00:00] b. Building and configuring environments [00:00:00] c. Basics of Orchestration [00:00:00] [ ] Part 13: Using relational databases [00:00:00] a. Using relational databases with Sequelize [00:00:00] b. Join tables and queries [00:00:00] c. Migrations, many-to-many relationships [00:00:00]","title":"FullStackOpen Learning Notes"},{"location":"FullStackOpen/part0/","text":"b. Fundamentals of Web apps On macOS, open the Developer Console by pressing fn - F12 or option-cmd-i simultaneously. On Windows or Linux, open the console by pressing Fn - F12 or ctrl-shift-i simultaneously. Make sure that the Network tab is open, and check the Disable cache option as shown. Preserve log can also be useful (it saves the logs printed by the application when the page is reloaded) as well as \"Hide extension URLs\" (hides requests of any extensions installed in the browser). The \"Disable cache\" option in the Network tab of browser developer tools, like Chrome DevTools, temporarily disables the browser's HTTP cache for the duration the developer tools are open. This means that when you reload a webpage or navigate to a new one, the browser will fetch resources (like CSS, JavaScript, images) directly from the server instead of serving them from the cache. This is useful during web development to ensure you're always seeing the latest version of your website, especially when making frequent changes to your code. To refresh a webpage, on windows, press the Fn - F5 keys. On macOS, press command - R. If you want to loopup a hostname from an IP address, you can use the command dig -x IP . Traditional web applications The content of the HTML page has been saved as a template string . Writing HTML amid the code is of course not smart, but for old-school PHP programmers, it was a normal practice. In traditional web applications, the browser is \"dumb\". It only fetches HTML data from the server, and all application logic is on the server. A server can be created using JavaSpring, Python Flask or Ruby on Rails to name just a few examples. Running application logic in the browser","title":"b. Fundamentals of Web apps"},{"location":"FullStackOpen/part0/#b-fundamentals-of-web-apps","text":"On macOS, open the Developer Console by pressing fn - F12 or option-cmd-i simultaneously. On Windows or Linux, open the console by pressing Fn - F12 or ctrl-shift-i simultaneously. Make sure that the Network tab is open, and check the Disable cache option as shown. Preserve log can also be useful (it saves the logs printed by the application when the page is reloaded) as well as \"Hide extension URLs\" (hides requests of any extensions installed in the browser). The \"Disable cache\" option in the Network tab of browser developer tools, like Chrome DevTools, temporarily disables the browser's HTTP cache for the duration the developer tools are open. This means that when you reload a webpage or navigate to a new one, the browser will fetch resources (like CSS, JavaScript, images) directly from the server instead of serving them from the cache. This is useful during web development to ensure you're always seeing the latest version of your website, especially when making frequent changes to your code. To refresh a webpage, on windows, press the Fn - F5 keys. On macOS, press command - R. If you want to loopup a hostname from an IP address, you can use the command dig -x IP .","title":"b. Fundamentals of Web apps"},{"location":"FullStackOpen/part0/#traditional-web-applications","text":"The content of the HTML page has been saved as a template string . Writing HTML amid the code is of course not smart, but for old-school PHP programmers, it was a normal practice. In traditional web applications, the browser is \"dumb\". It only fetches HTML data from the server, and all application logic is on the server. A server can be created using JavaSpring, Python Flask or Ruby on Rails to name just a few examples.","title":"Traditional web applications"},{"location":"FullStackOpen/part0/#running-application-logic-in-the-browser","text":"","title":"Running application logic in the browser"},{"location":"blogs/blog1/","text":"This is my first blog","title":"Blogs"},{"location":"blogs/blog1/#this-is-my-first-blog","text":"","title":"This is my first blog"}]}